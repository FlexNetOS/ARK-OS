{
  "bundle": {
    "name": "noa-cecca-stemcell-bundle-part2",
    "version": "0.5.0",
    "created": "2025-09-16T00:00:00Z",
    "style": "kernel-first • message-passing • async-only • no-globals • zero-bloat",
    "entry": "",
    "sbom": {
      "policy": {
        "failOnMissingModules": false,
        "failOnMissingEnv": false
      },
      "expectedEnv": ["NOA_PORT", "OFFLINE_MODE", "BASE_URL"],
      "autoFix": true
    },
    "modules": {
      "secrets/vault_lite": {
        "language": "javascript",
        "code": "(function(api,deps,state,require,exports,module){'use strict';\nexports.createSecrets=function(loader){ const {fs}=loader.state.shims; return { get:async (k)=>{ const env=loader.state.env||{}; if(k in env) return env[k]; const p='secrets/'+k; if(await fs.exists(p)) return fs.readFile(p); return '' } } };\n})"
      },
      "services/crm/strangler": {
        "language": "javascript",
        "code": "(function(api,deps,state,require,exports,module){'use strict';\nexports.createProxy=function(loader){ let mode='shadow'; const calls=[]; return { toggle:(m)=>{mode=m||mode; return mode}, call: async (op,payload)=>{ calls.push({op,payload,ts:Date.now(),mode}); return { ok:true, mode, op } }, log:()=>calls.slice(-10) } };\n})"
      },
      "digest/ingest": {
        "language": "javascript",
        "code": "(function(api,deps,state,require,exports,module){'use strict';\nexports.createDigest=function(loader){ const {timers}=loader.state.shims; return { scan: async (sources)=>{ await timers.delay(5); return { sources:sources||[], summary:'ok', embeddings:0 } } } };\n})"
      },
      "data/lineage": {
        "language": "javascript",
        "code": "(function(api,deps,state,require,exports,module){'use strict';\nexports.createLineage=function(loader){ const key='lineage'; if(!loader.state.storage.get(key)) loader.state.storage.set(key,[]);\n  return { record:(artifact)=>{ const arr=loader.state.storage.get(key); arr.push(Object.assign({ts:Date.now()},artifact)); loader.state.storage.set(key,arr); return true }, list:()=>loader.state.storage.get(key)||[] } } ;\n})"
      },
      "pack/signing": {
        "language": "javascript",
        "code": "(function(api,deps,state,require,exports,module){'use strict';\nexports.createSigner=function(loader){ return { verify:async (artifact)=>{ const ok=!!artifact&&!!artifact.digest; return { ok, reason: ok?'ok':'missing-digest' } } } };\n})"
      },
      "observability/trace": {
        "language": "javascript",
        "code": "(function(api,deps,state,require,exports,module){'use strict';\nexports.createTracer=function(loader){ return { event:(name,fields)=>{ const rec=Object.assign({name,ts:Date.now()},fields||{}); const k='trace'; const arr=loader.state.storage.get(k)||[]; arr.push(rec); loader.state.storage.set(k,arr); return rec }, dump:()=>loader.state.storage.get('trace')||[] } };\n})"
      },
      "workspace/auditor": {
        "language": "javascript",
        "code": "(function(api,deps,state,require,exports,module){'use strict';\nexports.createAuditor=function(loader){ const {fs,cryptoLite}=loader.state.shims; return { manifest:async ()=>{ const files=fs.list(); const map=new Map(); const dup=[]; for(const p of files){ const h=cryptoLite.djb2(await fs.readFile(p)); if(map.has(h)) dup.push([p,map.get(h)]); else map.set(h,p); } return { files, duplicates:dup } } } };\n})"
      },
      "upgrade/self": {
        "language": "javascript",
        "code": "(function(api,deps,state,require,exports,module){'use strict';\nexports.createUpgrader=function(loader){ const {bus}=loader.state; const signer=require('pack/signing').createSigner(loader); const lineage=require('data/lineage').createLineage(loader);\n  return { init(){ bus.sub('upgrade/apply', async (msg)=>{ const bundles=(msg&&msg.bundles)||[]; for(const b of bundles){ lineage.record({type:'bundle', name:b.name||'bundle', digest:b.digest||'na'}); }\n      const signOk=await signer.verify({digest:'local-stub'}); if(!signOk.ok) return {pass:false,reason:'signing'};\n      const verdict=await bus.ask('court/evaluate',{ verify_status:'passed', holes:(loader.state.sbom&&loader.state.sbom.holes)||{} }); return verdict; }); } };\n};\n})"
      },
      "kernel/scheduler": {
        "language": "javascript",
        "code": "(function(api,deps,state,require,exports,module){'use strict';\nexports.createScheduler=function(loader){ const q=[]; let running=false; const run=async()=>{ if(running) return; running=true; while(q.length){ const t=q.shift(); try{ await t() }catch(e){ loader.state.log('[task-error]',String(e)) } } running=false };\n  return { enqueue:(fn)=>{ q.push(fn); Promise.resolve().then(run); } };\n};\n})"
      },
      "kernel/capsule": {
        "language": "javascript",
        "code": "(function(api,deps,state,require,exports,module){'use strict';\nexports.spawn=function(loader,def){ const {bus}=loader.state; const local=Object.assign({},def);\n  if(typeof local.init==='function'){ Promise.resolve(local.init({bus,env:loader.state.env,log:loader.state.log,shims:loader.state.shims})).catch(e=>loader.state.log('[capsule-init-error]',e)); }\n  return local;\n};\n})"
      },
      "docs/Comprehensive Workspace Analysis & Optimization Plan with Tools.txt": {
        "language": "text",
        "code": "[Placeholder for Comprehensive Workspace Analysis & Optimization Plan with Tools.txt]"
      },
      "docs/Digest Everything Agent.txt": {
        "language": "text",
        "code": "[Placeholder for Digest Everything Agent.txt]"
      },
      "docs/Digest-Everything-Agent_1.txt": {
        "language": "text",
        "code": "[Placeholder for Digest-Everything-Agent_1.txt]"
      },
      "docs/NOA_Base-Mobile-XR_Architecture_Blueprint.md": {
        "language": "markdown",
        "code": "[Placeholder for NOA_Base-Mobile-XR_Architecture_Blueprint.md]"
      },
      "docs/Research Report_Chop-Shop_Digest-Everything-Agent.txt": {
        "language": "text",
        "code": "[Placeholder for Research Report_Chop-Shop_Digest-Everything-Agent.txt]"
      },
      "All_Inclusive_Agent_Directory.csv": {
        "language": "csv",
        "code": "[Placeholder for All_Inclusive_Agent_Directory.csv]"
      },
      "All_Inclusive_Agent_Directory_v6_plus.csv": {
        "language": "csv",
        "code": "[Placeholder for All_Inclusive_Agent_Directory_v6_plus.csv]"
      }
    }
  }
}
