{
  "bundle": {
    "name": "noa-cecca-stemcell-bundle-part1",
    "version": "0.5.1-part1",
    "created": "2025-09-16T00:00:00Z",
    "style": "kernel-first • message-passing • async-only • no-globals • zero-bloat",
    "entry": "kernel/bootstrap",
    "sbom": {
        "policy": {
            "failOnMissingModules": false,
            "failOnMissingEnv": false
        },
        "expectedEnv": ["NOA_PORT","OFFLINE_MODE","BASE_URL"],
        "autoFix": true
    },
    "modules": {
        "kernel/loader": {
            "language": "javascript",
            "code": "(function(api,deps,state,require,exports,module){'use strict';\n// Minimal loader with stubs; builds bus+shims before anything else.\nexports.createLoader=function createLoader(bundle,host){\n  const mods=bundle.modules; const cache=Object.create(null);\n  const state={ host, env:Object.assign({NOA_PORT:'8081',OFFLINE_MODE:'true',BASE_URL:'http://localhost:8081'}, host&&host.env||{}),\n    log:(...a)=> (host&&host.log?host.log(...a):console.log(...a)), time:()=>Date.now(), bus:null, shims:null, registry:new Map(), storage:host&&host.storage||new Map(), flags:{stubMissing:true} };\n  function dynamicStub(id){ return {exports:new Proxy(function(){},{\n    get:(_,k)=> (k==='toString')?(()=>`[stub:${id}]`): (typeof k==='string'? (function(){ return null; }): null),\n    apply:()=>null\n  })}; }\n  const localRequire=function(id){ if(cache[id]) return cache[id].exports; let m={exports:{}}; cache[id]=m; const mod=mods[id];\n    if(!mod){ if(state.flags.stubMissing){ state.log('[loader] stub for missing',id); m=cache[id]=dynamicStub(id); return m.exports; } throw new Error('module not found: '+id); }\n    const fn=new Function('api','deps','state','require','exports','module',mod.code); fn({}, {}, state, localRequire, m.exports, m); return m.exports; };\n  state.bus = localRequire('kernel/bus').createBus(state);\n  state.shims = localRequire('kernel/shims').createShims(state);\n  return { require: localRequire, state };\n};\n})"
        },
        "kernel/bus": {
            "language": "javascript",
            "code": "(function(api,deps,state,require,exports,module){'use strict';\n// Async pub/sub + ask() for RPC.\nexports.createBus=function createBus(state){ const topics=new Map();\n  const sub=(topic,fn)=>{ let arr=topics.get(topic); if(!arr){arr=[]; topics.set(topic,arr);} arr.push(fn); return ()=>{const i=arr.indexOf(fn); if(i>=0) arr.splice(i,1);} };\n  const pub=async (topic,msg)=>{ const arr=topics.get(topic); if(!arr||arr.length===0) return []; const out=[]; for(const fn of [...arr]){ try{ const r=fn(msg); out.push(r instanceof Promise? await r: r); }catch(e){ out.push({error:String(e)}) } } return out };\n  const ask=async (topic,msg)=>{ const res=await pub(topic,msg); for(const v of res){ if(v!==undefined) return v } return undefined };\n  return { sub, pub, ask };\n};\n})"
        },
        "kernel/shims": {
            "language": "javascript",
            "code": "(function(api,deps,state,require,exports,module){'use strict';\n// Safe micro-shims: fs/path/fetch/timers/crypto; no globals.\nexports.createShims=function(state){ const memFS=new Map(); const fs={ readFile:p=>Promise.resolve(memFS.get(p)||''), writeFile:(p,d)=>{memFS.set(p,String(d)); return Promise.resolve(true)}, exists:p=>Promise.resolve(memFS.has(p)), list:()=>Array.from(memFS.keys()) };\n  const path={ join:(...a)=>a.join('/').replace(/\\\\+/g,'/'), dirname:(p)=>p.split('/').slice(0,-1).join('/') };\n  const fetchLike=async (url,opts)=>{ if((state.env||{}).OFFLINE_MODE==='true'){ return { ok:true, status:204, json:async()=>({offline:true,url}) } } try{ const g=(typeof globalThis!=='undefined'&&globalThis.fetch)?globalThis.fetch:null; if(!g) return {ok:false,status:503,json:async()=>({error:'no-fetch'})}; return g(url,opts); }catch(e){ return {ok:false,status:500,json:async()=>({error:String(e)})} } };\n  const timers={ delay:ms=>new Promise(r=>setTimeout(r,ms)) };\n  const cryptoLite={ djb2:(s)=>{let h=5381; for(let i=0;i<s.length;i++){h=((h<<5)+h) ^ s.charCodeAt(i)} return (h>>>0).toString(16) } };\n  return { fs, path, fetch:fetchLike, timers, cryptoLite };\n};\n})"
        },
        "security/sbom": {
            "language": "javascript",
            "code": "(function(api,deps,state,require,exports,module){'use strict';\n// SBOM generator + hole detector. Auto-fixes env + missing requires.\nexports.scan=async function scan(bundle,loader){ const {cryptoLite}=loader.state.shims; const mods=bundle.modules; const entries=[]; const holes={ env:[], modules:[] };\n  const expected=(bundle.sbom&&bundle.sbom.expectedEnv)||[]; const env=loader.state.env||{};\n  for(const k of expected){ if(!(k in env)) holes.env.push(k) }\n  for(const id of Object.keys(mods)){\n    const code=String(mods[id].code||''); const reqs=Array.from(code.matchAll(/require\\(['\\\"](.*?)['\\\"]\\)/g)).map(m=>m[1]);\n    const rec={ name:id, lang:mods[id].language||'javascript', hash:cryptoLite.djb2(code), size:code.length, requires:reqs };\n    for(const need of reqs){ if(!mods[need]) holes.modules.push({from:id, requires:need}); }\n    entries.push(rec);\n  }\n  if((bundle.sbom&&bundle.sbom.autoFix)!==false){ for(const k of holes.env){ if(k==='NOA_PORT') loader.state.env[k]='8081'; else if(k==='OFFLINE_MODE') loader.state.env[k]='true'; else if(k==='BASE_URL') loader.state.env[k]='http://localhost:8081'; else loader.state.env[k]=''; }\n    for(const m of holes.modules){ if(!bundle.modules[m.requires]){ bundle.modules[m.requires]={language:'javascript', code:\"(function(api,deps,state,require,exports,module){'use strict'; module.exports={stub:true,module:'\"+m.requires+\"'};})\" }; }\n    }\n  }\n  return { modules:entries, holes };\n};\n})"
        },
        "governance/registrar": {
            "language": "javascript",
            "code": "(function(api,deps,state,require,exports,module){'use strict';\nexports.createRegistrar=function(){ const caps=new Map(); return { register:(name,meta)=>{caps.set(name,meta); return true}, get:(name)=>caps.get(name), list:()=>Array.from(caps.entries()).map(([k,v])=>({name:k,meta:v})) } };\n})"
        },
        "policy/opa_min": {
            "language": "javascript",
            "code": "(function(api,deps,state,require,exports,module){'use strict';\nexports.createPolicy=function(loader){ const storeKey='policies'; if(!loader.state.storage.get(storeKey)) loader.state.storage.set(storeKey,[]);\n  return { add:(name,fn)=>{ const arr=loader.state.storage.get(storeKey); arr.push({name,fn}); loader.state.storage.set(storeKey,arr); }, eval:async (input)=>{ const arr=loader.state.storage.get(storeKey)||[]; for(const r of arr){ try{ const pass=await r.fn(input); if(pass===false) return {allow:false,rule:r.name}; }catch(e){ return {allow:false,error:String(e)} } } return {allow:true} } };\n};\n})"
        },
        "governance/court": {
            "language": "javascript",
            "code": "(function(api,deps,state,require,exports,module){'use strict';\nexports.createCourt=function(loader){ const pol=require('policy/opa_min').createPolicy(loader);\n  pol.add('sbom-no-missing',(input)=>{ const holes=(input&&input.holes&&input.holes.modules)||[]; return holes.length===0; });\n  pol.add('verify-status-pass',(input)=> (input&&input.verify_status)==='passed');\n  return { evaluate:async (payload)=>{ const res=await pol.eval(payload||{}); const pass=!!res.allow; return { pass, reason:pass?'ok':(res.rule||'denied'), at: Date.now() } } };\n};\n})"
        },
        "host/profiler": {
            "language": "javascript",
            "code": "(function(api,deps,state,require,exports,module){'use strict';\nexports.profile=async function(loader){ const env=loader.state.env; const wsl=(typeof process!=='undefined'&&/microsoft/i.test((process.release&&process.release.name)||''))||false; return { os:'linux', wsl, cpu:'generic', gpu:'unknown', memMB:8192, offline: env.OFFLINE_MODE==='true' } };\n})"
        },
        "host/efg": {
            "language": "javascript",
            "code": "(function(api,deps,state,require,exports,module){'use strict';\nexports.buildEFG=function(profile){ return { nodes:{ OS:{name:profile.os}, HW:{cpu:profile.cpu,gpu:profile.gpu,memMB:profile.memMB}, NET:{offline:profile.offline}, POL:{offlineAllowed:true}, RT:{js:true}, SVC:{}, APP:{} }, edges:[[\'OS\',\'RT\'],[\'HW\',\'RT\'],[\'RT\',\'APP\'],[\'NET\',\'SVC\']] } };\n});\n})"
        },
        "runtime/model/select": {
            "language": "javascript",
            "code": "(function(api,deps,state,require,exports,module){'use strict';\nexports.createSelector=function(loader){ return { choose: async (efg,task)=>{ const gpu=(efg&&efg.nodes&&efg.nodes.HW&&efg.nodes.HW.gpu)||'unknown'; const offline=efg.nodes.NET.offline; return (gpu!=='unknown'||offline)? {mode:'local',engine:'llama.cpp'}: {mode:'remote',engine:'http'}; } } };\n});\n})"
        },
        "docs/3-plane-knowledge-cluster-pipeline.txt": {
            "language": "text",
            "code": "[Placeholder for contents of 3-plane-knowledge-cluster-pipeline.txt]"
        },
        "docs/Ark AI NOA — Data Architecture & Autonomous Intelligence.txt": {
            "language": "text",
            "code": "[Placeholder for contents of Ark AI NOA — Data Architecture & Autonomous Intelligence.txt]"
        },
        "docs/Ark-AI-NOA_The Local-First Agentic OS.txt": {
            "language": "text",
            "code": "[Placeholder for contents of Ark-AI-NOA_The Local-First Agentic OS.txt]"
        },
        "AGENT_Graph.csv": {
            "language": "csv",
            "code": "[Placeholder for AGENT_Graph.csv]"
        }
    }
  }
}
