{
  "bundle": {
    "name": "noa-cecca-stemcell-bundle-part10",
    "version": "P10",
    "created": "2025-09-16T00:00:00Z",
    "style": "kernel-first • message-passing • async-only • no-globals • zero-bloat",
    "entry": "kernel/bootstrap",
    "modules": {
      "unify/runner.js": {
        "language": "javascript",
        "code": "(function(){\n  'use strict';\n  function deepClone(o){ return JSON.parse(JSON.stringify(o)); }\n  function normalize(part){\n    const b = (part && part.bundle) ? part.bundle : { modules: {} };\n    return { name: b.name||'unknown', version: b.version||'Px', entry: b.entry||'kernel/bootstrap', modules: b.modules||{} };\n  }\n  function merge(parts){\n    const out = { bundle: { name: \"noa-unified\", version: \"P11-src\", entry: \"kernel/bootstrap\", modules: {} } };\n    const seen = new Set();\n    const shadows = [];\n    for (const p of parts){\n      const n = normalize(p);\n      for (const id of Object.keys(n.modules)){\n        if (!seen.has(id)){\n          out.bundle.modules[id] = deepClone(n.modules[id]);\n          seen.add(id);\n        } else {\n          shadows.push({ id, from: n.name, note: \"duplicate kept first\" });\n        }\n      }\n    }\n    out.bundle.modules['meta/merge_shadows.json'] = { language: 'json', code: JSON.stringify({shadows}, null, 2) };\n    return out;\n  }\n  // minimal self-check\n  async function selfCheck(bundle){\n    const b = (bundle && bundle.bundle) ? bundle.bundle : { modules: {} };\n    const ids = Object.keys(b.modules||{});\n    return { ok: ids.length > 0, modules: ids.length };\n  }\n  if (typeof module !== 'undefined') module.exports = { merge, selfCheck };\n  return { merge, selfCheck };\n})();\n"
      },
      "catalog/modules.json": {
        "language": "json",
        "code": "{\n  \"parts\": [\n    {\n      \"part\": \"noa_part2.json\",\n      \"modules\": [\n        \"docs/Digest Everything Agent.txt\",\n        \"docs/Digest-Everything-Agent_1.txt\",\n        \"docs/Research Report_Chop-Shop_Digest-Everything-Agent.txt\",\n        \"docs/ark-os-noa_agent_directory.md\",\n        \"docs/ark-os-noa_host-awareness_wiki.md\",\n        \"docs/digest_agent.md\",\n        \"docs/intelligence_learning.md\",\n        \"docs/microagentstack.md\",\n        \"docs/model_selector_agents.md\",\n        \"docs/noa.md\"\n      ]\n    },\n    {\n      \"part\": \"noa_part3.json\",\n      \"modules\": [\n        \"docs/3-plane-knowledge-cluster-pipeline.txt\",\n        \"docs/Ark AI NOA — Data Architecture & Autonomous Intelligence.txt\",\n        \"docs/Ark-AI-NOA_The Local-First Agentic OS.txt\",\n        \"docs/Ark-OS-NOA Full Rebuild Engineering Plan.docx\",\n        \"docs/api_connectors_frontend.md\",\n        \"docs/ark-ai-noa_ build-setup-instructions.txt\",\n        \"docs/ark-os-noa_all-in-one_v2.pdf\",\n        \"docs/ark-os-noa_framework_flow.md\",\n        \"docs/arkos-expanded-explained.txt\",\n        \"docs/backend.md\",\n        \"docs/board_agents.md\",\n        \"docs/combined-architecture-v.2.txt\",\n        \"docs/combined.md\",\n        \"docs/combined_framework_architecture.md\",\n        \"docs/data_storage.md\"\n      ]\n    },\n    {\n      \"part\": \"noa_part4.json\",\n      \"modules\": [\n        \"docs/3e8a0a84-5b5e-41a9-9eca-b06e7f49850e.png\",\n        \"docs/AGENT_Graph.csv\",\n        \"docs/Comprehensive Workspace Analysis & Optimization Plan with Tools.txt\",\n        \"docs/NOA_Base-Mobile-XR_Architecture_Blueprint.md\",\n        \"docs/Trifecta Court.txt\",\n        \"docs/Trifecta-Court-1.txt\",\n        \"docs/Unity Harmonica.txt\",\n        \"docs/heygen_clone_stack.md\",\n        \"docs/issues_epics_tasks.md\"\n      ]\n    },\n    {\n      \"part\": \"noa_part5.json\",\n      \"modules\": [\n        \"integrity/manifest.json\"\n      ]\n    },\n    {\n      \"part\": \"noa_part6.json\",\n      \"modules\": [\n        \"integrity/index.json\"\n      ]\n    },\n    {\n      \"part\": \"noa_part7.json\",\n      \"modules\": [\n        \"audit/coverage.json\"\n      ]\n    },\n    {\n      \"part\": \"noa_part8.json\",\n      \"modules\": [\n        \"integrity/rollup.json\",\n        \"merge/index.json\",\n        \"merge/rebuilder.js\"\n      ]\n    },\n    {\n      \"part\": \"noa_part9.json\",\n      \"modules\": [\n        \"doc/README_packaging_part9.md\",\n        \"integrity/selftest.js\",\n        \"merge/apply.js\",\n        \"ops/restore_examples.json\"\n      ]\n    }\n  ]\n}"
      },
      "doc/USAGE_part10.md": {
        "language": "markdown",
        "code": "# NOA Packaging — Part 10 (Unified Runner & Catalog)\n\nThis part embeds:\n- `unify/runner.js` — a dependency-free merger that takes Part 2–9 JSONs (as objects) and produces a single unified bundle.\n- `catalog/modules.json` — a compact index of module IDs per prior part.\n- `doc/USAGE_part10.md` — minimal usage steps.\n\n## Steps\n1. Load Part 2–9 JSONs into memory.\n2. `const { merge, selfCheck } = require('unify/runner.js');`\n3. `const unified = merge([p2,p3,p4,p5,p6,p7,p8,p9]);`\n4. `const ok = await selfCheck(unified);` (should be true)\n5. Feed `unified` to NOA kernel via `kernel/bootstrap.main(unified, host)`.\n"
      },
      "doc/USAGE_snippet.md": {
        "language": "markdown",
        "code": "# Usage (Part 10)\n```js\nconst p2 = /* load noa_part2.json */;\nconst p3 = /* load noa_part3.json */;\n// ...\nconst p9 = /* load noa_part9.json */;\nconst { merge, selfCheck } = require('unify/runner.js');\nconst unified = merge([p2,p3,p4,p5,p6,p7,p8,p9]);\nconst check = await selfCheck(unified);\nif (!check.ok) throw new Error('Unified bundle failed self-check');\n// now hand to kernel/bootstrap.main(unified, host)\n```\n"
      }
    },
    "next": "noa-part11.json"
  }
}